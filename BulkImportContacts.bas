Attribute VB_Name = "Module1"
' used for ComboBox1 in UserForm1
Public choice As String

' imports contacts from emails from a folder
' searches for the folder with FindInFolders()
' calls ImportToContacts() when folder is found
Sub BulkImportContacts()
    Dim name As String

    ' if nothing is entered, exit out of macro
    name = InputBox("Enter ConstantContact folder name:", "Search Folder")
    If Len(Trim$(name)) = 0 Then Exit Sub
    
    ' find out if folder exists
    Dim FoundFolder As Folder
    Set FoundFolder = FindInFolders(Application.Session.Folders, name)
    
    ' if folder is not found or is empty, do nothing
    ' if the folder is found and has items, call ImportToContacts()
    If FoundFolder Is Nothing Then
        MsgBox "Not Found", vbInformation
        Exit Sub
    ElseIf FoundFolder.Items.Count = 0 Then
        MsgBox ("Folder is empty.")
        Exit Sub
    Else
        Call ImportToContacts(FoundFolder)
    End If
    
    ' clean up
    Set FoundFolder = Nothing
End Sub

' searches for a given folder name in the inbox
Private Function FindInFolders(TheFolders As Outlook.Folders, name As String)
    Dim SubFolder As Outlook.Folder
    
    On Error Resume Next
    
    Set FindInFolders = Nothing
    
    For Each SubFolder In TheFolders
        If LCase(SubFolder.name) Like LCase(name) Then
            ' return value
            Set FindInFolders = SubFolder
            Exit For
        Else
            ' return value
            Set FindInFolders = FindInFolders(SubFolder.Folders, name)
            If Not FindInFolders Is Nothing Then Exit For
        End If
    Next
End Function

' searches through a given folder and gets contact information from email body
' calls CreateOrUpdateContact() to create new contacts
Private Sub ImportToContacts(FoundFolder As Folder)
    Dim Mail As Outlook.MailItem
    Dim MyItems As Outlook.Items
    Dim dt As Date
    Dim constantContact As String
    Dim paypal As String
    Dim filter As String
    Dim counter As Integer
    
    On Error GoTo ErrorHandler
    
    dt = DateTime.Date
    constantContact = "donotreply_eventspot@constantcontact.com"
    paypal = "service@paypal.com"
    counter = 0
    
    ' load user form and get time frame
    Load UserForm1
    UserForm1.Show
    
    Dim days As Integer
    days = 0
    
    ' set days if choice is not Today
    If choice = "Yesterday" Then
        days = 1
    ElseIf choice = "A week" Then
        days = 7
    ElseIf choice = "Two weeks" Then
        days = 14
    ElseIf choice = "30 days" Then
        days = 30
    ElseIf choice = "Cancel" Then
        Exit Sub
    End If
    
    filter = "[Received] >= " & Chr(34) & dt - days & Chr(34)
    Set MyItems = FoundFolder.Items.Restrict(filter)
    
    For Each Mail In MyItems
        ' mark as read if it is unread
        If Mail.UnRead Then
            Mail.UnRead = False
        End If
        
        ' If Mail.SenderEmailAddress Like constantContact Then
            Call CreateOrUpdateContact(Mail.body)
        ' ElseIf Mail.SenderEmailAddress Like paypal Then
        '    Call UpdatePayment(Mail.body)
        ' End If
        
        ' for debugging
        ' Mail.SaveAs "C:\Users\Hunter\Documents\out" & counter & ".txt", olTXT
        ' Mail.SaveAs "C:\Users\Michelle\Documents\out" & counter & ".txt", olTXT
        ' Debug.Print counter + 1 & ". Body: " & vbNewLine & Mail.body
        
        counter = counter + 1
    Next
    
    msg = "Process was successful!" & vbNewLine & vbNewLine & _
        "Read " & counter & " e-mails."
    
    MsgBox msg
    
ErrorHandler:
    If Err.Number <> 0 Then
        msg = "Error # " & str(Err.Number) & " was generated by " & _
            Err.Source & Chr(13) & Err.Description
        MsgBox msg, vbExclamation, "Error", Err.HelpFile, Err.HelpContext
    End If
    
    ' clean up
    Set ContactsFolder = Nothing
End Sub

' update the notes of a given contact to display that payment was received
Private Sub UpdatePayment(body As String)
    Dim messageArray() As String
    Dim splitArray() As String
    Dim delimitedMessage As String
    Dim fullName1 As String
    Dim fullName2 As String
    Dim email As String
    Dim payment As String
    Dim prompt As String
    Dim Contact As Outlook.ContactItem
    Dim ContactItems As Outlook.Items
    
    ' replace specific text with ### in order to split it up into an array
    ' field names may change if email body changes in the future
    delimitedMessage = Replace(body, "Buyer information", "###")
    delimitedMessage = Replace(delimitedMessage, "Instructions from buyer", "###")
    delimitedMessage = Replace(delimitedMessage, "National Center's Regional Conference - ", "###")
    delimitedMessage = Replace(delimitedMessage, "Insurance:", "###")
    messageArray = Split(delimitedMessage, "###")
    
    ' clean up fullName1
    splitArray = Split(messageArray(1), vbNewLine)
    fullName1 = splitArray(1)
    email = splitArray(2)
    
    ' clean up email
    splitArray = Split(email, Chr(34))
    email = splitArray(UBound(splitArray))
    
    ' clean up fullName2
    splitArray = Split(messageArray(3), vbNewLine)
    fullName2 = splitArray(0)
    
    ' clean up payment
    splitArray = Split(splitArray(1), " ")
    payment = Replace(splitArray(0), vbTab, "")
    
    splitArray = Split(fullName2, " ")
    Set ContactItems = FindContacts(splitArray(0), splitArray(1))
    
    ' prompt the user if there are multiple results from the query
    If ContactItems.Count > 1 Then
        msg = "There are " & ContactItems.Count & " matches for " & Chr(34) & fullName2 & Chr(34) & "!"
        MsgBox msg, , "Paypal: Multiple Results!"
    End If
    
    For Each Contact In ContactItems
        prompt = "Name: " & Contact.fullName & vbNewLine & _
            "Email: " & Contact.Email1Address & vbNewLine & _
            "Phone: " & Contact.BusinessTelephoneNumber & vbNewLine & _
            "Company: " & Contact.CompanyName & vbNewLine & _
            "Job Title: " & Contact.JobTitle & vbNewLine & _
            "Address: " & Contact.BusinessAddress & vbNewLine & _
            Contact.BusinessAddressCountry & vbNewLine & _
            "Notes: " & Contact.body & vbNewLine & _
            vbNewLine & "Update with pyament information?"
        
        If MsgBox(prompt, vbQuestion Or vbYesNo, "Update?") = vbYes Then
            ' adjust for paypal fee
            Dim value As Double
            value = CDec(payment) - (CDec(payment) * 0.022)
            
            splitArray = Split(Contact.body, "Total payment:")

            If UBound(splitArray) = 0 Then
                Contact.body = Contact.body & vbNewLine & "Total payment: $" & value
                
                If fullName1 <> fullName2 Then
                    Contact.body = Contact.body & " c/o " & fullName1
                End If
                
                Contact.body = Contact.body & " " & Year(Date)
                ' Contact.Save
            End If
        End If
    Next
    
'    If Not Contact Is Nothing Then
'
'    Else
'        msg = "No entry found for " & Chr(34) & fullName2 & Chr(34) & "!"
'        MsgBox msg, vbExclamation, "Paypal Update"
'    End If
    
    ' clean up
    Set Contact = Nothing
End Sub

' gets contact information from email body and uses this information to populate a contact card
Private Sub CreateOrUpdateContact(body As String)
    Dim messageArray() As String
    Dim splitArray() As String
    Dim delimitedMessage As String
    Dim prompt As String
    Dim ContactItems As Outlook.Items
    Dim Contact As Outlook.ContactItem
    
    On Error GoTo ErrorHandler
    
    ' replace specific text with ### in order to split it up into an array
    ' field names may change if email body changes in the future
    delimitedMessage = Replace(body, "First Name:", "###")
    delimitedMessage = Replace(delimitedMessage, "Last Name:", "###")
    delimitedMessage = Replace(delimitedMessage, "Email Address:", "###")
    delimitedMessage = Replace(delimitedMessage, "Phone:", "###")
    delimitedMessage = Replace(delimitedMessage, "Business Information", "###")
    delimitedMessage = Replace(delimitedMessage, "Company:", "###")
    delimitedMessage = Replace(delimitedMessage, "Job Title:", "###")
    delimitedMessage = Replace(delimitedMessage, "Address 1:", "###")
    delimitedMessage = Replace(delimitedMessage, "City:", "###")
    delimitedMessage = Replace(delimitedMessage, "State:", "###")
    delimitedMessage = Replace(delimitedMessage, "ZIP Code:", "###")
    delimitedMessage = Replace(delimitedMessage, "Country:", "###")
    delimitedMessage = Replace(delimitedMessage, "What is your position?", "###")
    delimitedMessage = Replace(delimitedMessage, "Payment Summary", "###")
    delimitedMessage = Replace(delimitedMessage, "Total", "###")
    messageArray = Split(delimitedMessage, "###")
        
    ' clean up values and remove unwanted characters
    ' used on shared PC
    Dim i As Integer
    For i = 1 To 13
        ' remove the " mark from the hyperlink
        If i = 3 Or i = 4 Or i = 8 Then
            splitArray = Split(messageArray(i), Chr(34))
            messageArray(i) = splitArray(UBound(splitArray))
        End If

        ' remove the newline character and replace it with an empty string
        messageArray(i) = Replace(messageArray(i), vbNewLine, "")
    Next
    
    splitArray = Split(messageArray(15), vbNewLine)
    messageArray(15) = splitArray(6)
    Debug.Print "Message Array (15): " & messageArray(15)
    
'    ' replace unwanted characters with an empty string
'    ' used on end user's PC
'    Dim i As Integer
'    For i = 1 To UBound(messageArray)
'        messageArray(i) = Replace(messageArray(i), vbNewLine, "")
'        messageArray(i) = Replace(messageArray(i), vbTab, "")
'    Next
    
    ' search for contacts after collecting the relevant data
    Set ContactItems = FindContacts(messageArray(1), messageArray(2))
    
    ' prompt the user if there are multiple results from the query
    If ContactItems.Count > 1 Then
        msg = "There are " & ContactItems.Count & " matches for " & Chr(34) & _
            messageArray(1) & " " & messageArray(2) & Chr(34) & "!"
        MsgBox msg, , "ConstantContact: Multiple Results!"
    End If
    
    ' if the contact is found, then prompt the user before updating it
    For Each Contact In ContactItems
        ' build prompt
        ' new contact info
        prompt = "Contact exists!" & vbNewLine & vbNewLine & "New information:" & vbNewLine & _
            "Name: " & messageArray(1) & " " & messageArray(2) & vbNewLine & _
            "Email: " & messageArray(3) & vbNewLine & _
            "Phone: " & messageArray(4) & vbNewLine & _
            "Company: " & messageArray(6) & vbNewLine & _
            "Job Title: " & messageArray(7) & vbNewLine & _
            "Address: " & messageArray(8) & vbNewLine & messageArray(9) & ", " & _
            StateAbbreviation(messageArray(10)) & " " & messageArray(11) & vbNewLine & _
            messageArray(12) & vbNewLine & vbNewLine
        
        ' old contact info
        prompt = prompt & "Old information:" & vbNewLine & _
            "Name: " & Contact.fullName & vbNewLine & _
            "Email: " & Contact.Email1Address & vbNewLine & _
            "Phone: " & Contact.BusinessTelephoneNumber & vbNewLine & _
            "Company: " & Contact.CompanyName & vbNewLine & _
            "Job Title: " & Contact.JobTitle & vbNewLine & _
            "Address: " & Contact.BusinessAddress & vbNewLine & _
            Contact.BusinessAddressCountry & vbNewLine & _
            "Notes: " & Contact.body & vbNewLine & _
            vbNewLine & "Update with new information?"
                
        If MsgBox(prompt, vbQuestion Or vbYesNo, "Update?") = vbNo Then
            Set Contact = Nothing
        End If
        
        ' create or update contact if contact object has been set
        Call SaveContact(Contact, messageArray())
    Next
    
    ' if no contacts are found, then create a new contact without prompting the user
    If ContactItems.Count = 0 Then
        Call SaveContact(Application.CreateItem(olContactItem), messageArray())
    End If
    
ErrorHandler:
    If Err.Number <> 0 Then
        msg = "Error # " & str(Err.Number) & " was generated by " & _
            Err.Source & Chr(13) & Err.Description
        MsgBox msg, , "Error", Err.HelpFile, Err.HelpContext
        End
    End If
    
    ' clean up
    Set Contact = Nothing
    Set ContactItems = Nothing
End Sub

' using a given firstName and lastName searches and returns a collection of Contacts
Private Function FindContacts(firstName As String, lastName As String)
    Dim filter As String
    Dim ContactsFolder As Folder
    Dim ContactItems As Outlook.Items
    
    filter = "[FullName] = " & Chr(34) & firstName & " " & lastName & Chr(34)
    
    Set ContactsFolder = Session.GetDefaultFolder(olFolderContacts)
    Set ContactItems = ContactsFolder.Items.Restrict(filter)
    
    ' return value
    Set FindContacts = ContactItems
    
    ' clean up
    Set ConctacsFolder = Nothing
    Set ConactItems = Nothing
End Function

' searches for a contact using a given first name, last name, and email
' returns contact object if it is found and Nothing if it is not found
Private Function FindContact(firstName As String, lastName As String, Optional email As String)
    Dim filter As String
    Dim ContactsFolder As Folder
    Dim Contact As Outlook.ContactItem
    
    filter = "[FullName] = " & Chr(34) & firstName & " " & lastName & Chr(34)
    
    If email <> "" Then
        filter = filter & " And [E-mail] = " & Chr(34) & email & Chr(34)
    End If
    
    Set ContactsFolder = Session.GetDefaultFolder(olFolderContacts)
    Set Contact = ContactsFolder.Items.Find(filter)
    
    ' return value
    Set FindContact = Contact
    
    ' clean up
    Set ConctacsFolder = Nothing
    Set Conact = Nothing
End Function

Private Sub SaveContact(Contact As Outlook.ContactItem, messageArray() As String)
    ' check to see if an empty object was passed through
    If Not Contact Is Nothing Then
        With Contact
            .firstName = messageArray(1)
            .lastName = messageArray(2)
            .Email1Address = messageArray(3)
            .BusinessTelephoneNumber = messageArray(4)
            .CompanyName = messageArray(6)
            .JobTitle = messageArray(7)
            .BusinessAddressStreet = messageArray(8)
            .BusinessAddressCity = messageArray(9)
            .BusinessAddressState = StateAbbreviation(messageArray(10))
            .BusinessAddressPostalCode = messageArray(11)
            .BusinessAddressCountry = messageArray(12)
            .Categories = "Correspondence"
        End With
        
        If Contact.body = "" Then
            Contact.body = Year(Date) & vbNewLine & "Position: " & messageArray(13)
        Else
            prompt = "Append notes?" & vbNewLine & vbNewLine & "Notes:" & vbNewLine & _
                Contact.body & vbNewLine & vbNewLine & "Append with:" & vbNewLine & _
                "Position: " & messageArray(13)
            
            If MsgBox(prompt, vbQuestion Or vbYesNo) = vbYes Then
                Contact.body = Contact.body & vbNewLine & vbNewLine & Year(Date) & _
                    vbNewLine & "Position: " & messageArray(13)
            End If
        End If
        
        ' save contact data in default contacts folder
        Contact.Save
    End If
End Sub

' returns the state abbreviation
' returns the original string if it is not found
Private Function StateAbbreviation(stateName As String)
    Dim sn As String
    sn = UCase(stateName)
    
    StateAbbreviation = stateName
    
    If sn = "ALABAMA" Then
        StateAbbreviation = "AL"
    ElseIf sn = "ALASKA" Then
        StateAbbreviation = "AK"
    ElseIf sn = "ARIZONA" Then
        StateAbbreviation = "AZ"
    ElseIf sn = "ARKANSAS" Then
        StateAbbreviation = "AR"
    ElseIf sn = "CALIFORNIA" Then
        StateAbbreviation = "CA"
    ElseIf sn = "COLORADO" Then
        StateAbbreviation = "CO"
    ElseIf sn = "CONNECTICUT" Then
        StateAbbreviation = "CT"
    ElseIf sn = "DELAWARE" Then
        StateAbbreviation = "DE"
    ElseIf sn = "FLORIDA" Then
        StateAbbreviation = "FL"
    ElseIf sn = "GEORGIA" Then
        StateAbbreviation = "GA"
    ElseIf sn = "HAWAII" Then
        StateAbbreviation = "HI"
    ElseIf sn = "IDAHO" Then
        StateAbbreviation = "ID"
    ElseIf sn = "ILLINOIS" Then
        StateAbbreviation = "IL"
    ElseIf sn = "INDIANA" Then
        StateAbbreviation = "IN"
    ElseIf sn = "IOWA" Then
        StateAbbreviation = "IA"
    ElseIf sn = "KANSAS" Then
        StateAbbreviation = "KS"
    ElseIf sn = "KENTUCKY" Then
        StateAbbreviation = "KY"
    ElseIf sn = "LOUISIANA" Then
        StateAbbreviation = "LA"
    ElseIf sn = "MAINE" Then
        StateAbbreviation = "ME"
    ElseIf sn = "MARYLAND" Then
        StateAbbreviation = "MD"
    ElseIf sn = "MASSACHUSETTS" Then
        StateAbbreviation = "MA"
    ElseIf sn = "MICHIGAN" Then
        StateAbbreviation = "MI"
    ElseIf sn = "MINNESOTA" Then
        StateAbbreviation = "MN"
    ElseIf sn = "MISSISSIPPI" Then
        StateAbbreviation = "MS"
    ElseIf sn = "MISSOURI" Then
        StateAbbreviation = "MO"
    ElseIf sn = "MONTANA" Then
        StateAbbreviation = "MT"
    ElseIf sn = "NEBRASKA" Then
        StateAbbreviation = "NE"
    ElseIf sn = "NEVADA" Then
        StateAbbreviation = "NV"
    ElseIf sn = "NEW HAMPSHIRE" Then
        StateAbbreviation = "NH"
    ElseIf sn = "NEW JERSEY" Then
        StateAbbreviation = "NJ"
    ElseIf sn = "NEW MEXICO" Then
        StateAbbreviation = "NM"
    ElseIf sn = "NEW YORK" Then
        StateAbbreviation = "NY"
    ElseIf sn = "NORTH CAROLINA" Then
        StateAbbreviation = "NC"
    ElseIf sn = "NORTH DAKOTA" Then
        StateAbbreviation = "ND"
    ElseIf sn = "OHIO" Then
        StateAbbreviation = "OH"
    ElseIf sn = "OKLAHOMA" Then
        StateAbbreviation = "OK"
    ElseIf sn = "OREGON" Then
        StateAbbreviation = "OR"
    ElseIf sn = "PENNSYLVANIA" Then
        StateAbbreviation = "PA"
    ElseIf sn = "RHODE ISLAND" Then
        StateAbbreviation = "RI"
    ElseIf sn = "SOUTH CAROLINA" Then
        StateAbbreviation = "SC"
    ElseIf sn = "SOUTH DAKOTA" Then
        StateAbbreviation = "SD"
    ElseIf sn = "TENNESSEE" Then
        StateAbbreviation = "TN"
    ElseIf sn = "TEXAS" Then
        StateAbbreviation = "TX"
    ElseIf sn = "UTAH" Then
        StateAbbreviation = "UT"
    ElseIf sn = "VERMONT" Then
        StateAbbreviation = "VT"
    ElseIf sn = "VIRGINIA" Then
        StateAbbreviation = "VA"
    ElseIf sn = "WASHINGTON" Then
        StateAbbreviation = "WA"
    ElseIf sn = "WEST VIRGINIA" Then
        StateAbbreviation = "WV"
    ElseIf sn = "WISCONSIN" Then
        StateAbbreviation = "WI"
    ElseIf sn = "WYOMING" Then
        StateAbbreviation = "WY"
    End If
End Function
